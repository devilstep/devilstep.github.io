<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Binary | devilstep security group]]></title>
  <link href="http://www.devilstep.com/blog/categories/binary/atom.xml" rel="self"/>
  <link href="http://www.devilstep.com/"/>
  <updated>2015-05-04T09:45:01-07:00</updated>
  <id>http://www.devilstep.com/</id>
  <author>
    <name><![CDATA[devilstep]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[010注册算法分析]]></title>
    <link href="http://www.devilstep.com/2014/11/18/010-keymakey-algorithm/"/>
    <updated>2014-11-18T22:24:35-08:00</updated>
    <id>http://www.devilstep.com/2014/11/18/010-keymakey-algorithm</id>
    <content type="html"><![CDATA[<p>author:anhkgg</p>

<h3>关键函数定位</h3>

<p>进入register窗口，随便填入name，然后check license，弹框信息”Invalid name or password. Please enter your name and password exactly as given when you purchased 010 Editor (make sure no quotes are included).”，通过该信息在IDA中找到对应函数地址，基本可以确认是关键函数位置，函数居然有名字，这是作者故意留下的吗。下面是整个验证函数流程：</p>

<!--more-->


<pre><code>void __usercall chekc(char a1&lt;zf&gt;, int a2&lt;ecx&gt;)
{
//获取用户名
//是否为空
//获取注册码
//是否为空
//注册码格式检查xxxx-xxxx-xxxx-xxxx-xxxx
v42 = (void *)myCheck(mygbName, 3u, ‘9A’); //注册码验证，返回值v42对于是否注册成功，有很大关系，返回值为231，为失败
v26 = mySecondCheck(mygbName, 3u, ‘9A’); // 第二次检查，如果返回中为219，就会进入后面的注册成功提示
//myCheck中返回不等于231，mygbName + 44提示进入网络验证，没有弄清楚，哪里会等于1
if ( v42 != (void *)231 &amp;&amp; *(_DWORD *)(mygbName + 44) )
{
v27 = myWebCheck((void *)mygbName, 0);
if(v27 &lt; 0 )
{
v43 = myMsg(“Could not contact the webserver. Please check your internet connection. If your internet connection is currently working, the server may be down. If this problem persists, please visit ‘http://www.sweetscape.com/support/’ (“, 0xFFFFFFFFu);
}
if ( !v27 )
{
v43 = myMsg( “010 Editor has detected that you have entered an invalid license. Please check to see if your license is entered correctly and try again. If this problem persists, please visit ‘http://www.sweetscape.com/support/’.”, 0xFFFFFFFFu);
}
v33 = mySecondCheck(mygbName, 3u, ‘9A’);//网络验证是否成功，成功，返回219
}
if ( v43 == (void *)219 ) // v43 == 219，注册成功
{
v43 = myMsg(“Password accepted. Thank you for purchasing 010 Editor!”, 0xFFFFFFFFu);
//写入注册表
}
}
</code></pre>

<h3>算法分析</h3>

<p>下面看看主要的验证函数myCheck和mySecondCheck，代码如下：</p>

<pre><code>signed int __thiscall mySecondCheck(int this, unsigned int a2, unsigned int a3)
{
int v3; // esi@1
signed int result; // eax@2
int v5; // eax@3
int v6; // eax@6
int v7; // eax@9
v3 = this;
if ( *(_DWORD *)(this + 44) ) // 要让这个值等于0，否则进入网络验证，初始化就是0
return 275;
v5 = myCheck(this, a2, a3); //可以看到，只有返回值是45时，才能返回219，注册成功
if ( v5 == 45 )
{
result = 219; // 返回219， 注册成功
}
}
</code></pre>

<p>可以看到，只有返回值是45时，才能返回219，注册成功。
那么返回myCheck看看，怎么才能得到45的返回值，整个返回值查看一下，只有两处位置，可能返回45，如下：</p>

<pre><code>if ( v26 == 0x9Cu )
{
v20 = *(_DWORD *)(regdlg + 28) &lt; a2;
return (-v20 &amp; 0x21) + 45; // 成功？
}
if ( v26 != 0xFCu )
{
if ( v26 == 0xACu &amp;&amp; v33 )
{
v20 = v33 &lt; a3;
return (-v20 &amp; 0x21) + 45; // 成功？
}
return 231;
}
</code></pre>

<p>那么就需要回溯回去，看看v26，是如何得到的，只有在v26等于0x9c或者0xAc时，才有可能注册成功。下面看看完整代码：</p>

<pre><code>int __thiscall myCheck(int this, unsigned int a2, unsigned int a3)
{
//name和key长度是否为0
//myPassCheck(this, (int)&amp;v23);//将key字符串转换成数值，每两个字符转化成2为十六进制数，
//xxxx-xxxx-xxxx-xxxx-xxxx分别对应k1k2-k3k4-k5k6-k7k8-k9k10
//v23其实就是一个数组，存的就是k1-k10
//检测name是否等于’999′,是，则失败
if ( v26 == 0x9Cu )
{
LOBYTE(v32) = v23 ^ v28; // k1^k7
LOWORD(v6) = (unsigned __int8)(v24 ^ v29); // k2^k8
LOWORD(v7) = (unsigned __int8)(v25 ^ HIBYTE(v27));// k3^k6
v11 = v7 + ((_DWORD)v6 &lt;&lt; 8); // v11 = k3^k6 + ((k2^k8)&lt;&lt;8)
*(_DWORD *)(regdlg + 28) = (unsigned __int8)myCal1(v23 ^ v28);// k1^k7 =&gt; 不能等于0
v9 = myCal2(v11); // 不能等于0
v10 = *(_DWORD *)(regdlg + 28);
*(_DWORD *)(regdlg + 32) = (unsigned __int16)v9;
// v10==0,v9==0或者v9&gt;0x3e8，返回231
if ( !v10 || !v9 || (unsigned __int16)v9 &gt; 0x3E8u )
return 231;
v12 = v10 &lt; 2 ? v10 : 0; // v12 = 0或者1
}else
{
if(v26 == 0xFC)
{//不可能成功
}esle
{
//v26不等于0xAC，退出，返回231，失败
//myCal2(k3^k6 + ((k2^k8)&lt;&lt;8)) &gt; 0x3E8, 失败
if ( v26 != 0xACu
|| (v15 = v24 ^ v29,//k2^k8
v16 = v25 ^ HIBYTE(v27),//k3^k6
*(_DWORD *)(regdlg + 28) = 2,
v14 = (unsigned __int16)myCal2(v16 + (v15 &lt;&lt; 8)),v11 = k3^k6 + ((k2^k8)&lt;&lt;8)
*(_DWORD *)(regdlg + 32) = (unsigned __int16)v14,
!(_WORD)v14)
|| v14 &gt; 0x3E8 )
return 231;
//sub_4FD0B9( (k1^k7 + (k9^k5 + (k6^k10)&lt;&lt;8)&lt;&lt;8), xxx);
//其实就是凑成十六进制数(k6^k10)(k9^k5)(k1^k7)
v17 = sub_4FD0B9(
(v23 ^ v28) + (((v30 ^ (unsigned __int8)v27) + ((HIBYTE(v27) ^ v31) &lt;&lt; 8)) &lt;&lt; 8),
(char *)loc_5B8C25 + 2);
v33 = v17;
*(_DWORD *)(regdlg + 52) = v17;
v12 = v17;
}
}
//编码name，返回给v18，
v18 = myEncStr(*(const char **)(*(_DWORD *)qstrname + 12), v26 != -4, v12, *(_DWORD *)(regdlg + 32));
//如果v18，如0xABCDEF10分解成0xAB，0xCD， 0xEF10,不等于v29, v28,v27就失败，其实就是
//(k6k5) = 0xEF10, k7 = 0xCD, k8 = 0xAB
if ( v27 != (_WORD)v18
|| v28 != (unsigned __int8)((unsigned int)v18 &gt;&gt; 0x10u)
|| v29 != (unsigned __int8)((unsigned int)v18 &gt;&gt; 0x18u) )
return 231; // 这三个条件很重要啊
//下面就接近成功了，就是上面提到的返回45的结果，成功
if ( v26 == 0x9Cu )
{
//这里就需要regdlg + 28 = myCal1(k1^k7) &gt;= a2,也就是3，传入的a2是3
//然后v20就是0，那么(-v20 &amp; 0x21)=0，最后返回45
v20 = *(_DWORD *)(regdlg + 28) &lt; a2;
return (-v20 &amp; 0x21) + 45; // 成功？
}
if ( v26 != 0xFCu )
{
if ( v26 == 0xACu &amp;&amp; v33 )
{
v20 = v33 &lt; a3;
return (-v20 &amp; 0x21) + 45; // 成功？
}
return 231;
}
}
</code></pre>

<p>最后总结一下算法，基本可以列出一个方程类似的东西：</p>

<pre><code>k4 = 0x9C或者0xAC
myCal1(k1^k7) &gt;= 3;//可以任取大于等于3的值，算出k1^k7=？
myCal2(k3^k6 + ((k2^k8)&lt;&lt;8)) &gt; 0;//可以任去大于0
myCal2(k3^k6 + ((k2^k8)&lt;&lt;8)) &lt; 0x3E8;//小于0x3E8的某一个值，算出k3^k6 + ((k2^k8)&lt;&lt;8) = ？
k8k7k6k5 = v18;//0xABCDEF10，可以得到k5=?,k6=?,k7=?,k8=?，由此可以算出上面的k1,k2
sub_4FD0B9((k6^k10)(k9^k5)(k1^k7), xx) = ?//可以算出k9，k10
</code></pre>

<p>下面就0x9C的情况写了个注册机</p>

<h3>注册机</h3>

<p>根据上面的注册算法，写了个针对0x9c的注册机：</p>

<pre><code>DWORD ckname(char* name, int isnotFC, int islowk1k7, DWORD k3k6k2k8 )
{
int slen = strlen(name);
if(slen &gt; 0 )
{
DWORD v15 = 0, v17 = 0, v16 = 0, chk = 0, v9 = 0, v8=0, v14 = 0, v5 = 0, v6 = 0;
while(v14 &lt; slen)
{
DWORD v7 = toupper(name[v14]);
if(isnotFC)
{
v9 = dword_B21DC4[(v17 + 15 * k3k6k2k8) &amp; 0xFF]
+ dword_B21DC4[(v6 + 17 * islowk1k7) &amp; 0xFF]
+ dword_B21DC4[(v7 + 47) &amp; 0xFF] * ((v5 + dword_B21DC4[v7]) ^ dword_B21DC4[(v7 + 13) &amp; 0xFF]);
v8 = v16;
}
else{
v9 = dword_B21DC4[(v17 + 15 * k3k6k2k8) &amp; 0xFF]
+ dword_B21DC4[(v6 + 17 * islowk1k7) &amp; 0xFF]
+ dword_B21DC4[(v7 + 23) &amp; 0xFF] * ((v5 + dword_B21DC4[v7]) ^ dword_B21DC4[(v7 + 63) &amp; 0xFF]);
v8 = v15;
}
v16 += 19;
v17 += 13;
v15 += 7;
v6 += 9;
v5 = dword_B21DC4[v8] + v9;
v14 = v14 + 1;
}
return v5;
}
}
int main()
{
char name[] = “”;
char key[0x20] = {0};
int k4 = 0x9c;//0xac
int islowk1k7 = 3;//&gt;=3
int k1_xor_k7 = ((islowk1k7^0xA7)-61)^0x18;
int k3k6k2k8 = 1;//k3k6k2k8&gt;=1 &amp;&amp; k3k6k2k8&lt;0x3E8，其中任意一个值
int k3_xor_k6_k2_xor_k8 = 0xFFFF &amp; (((k3k6k2k8*11)^0x3421)-19760);
k3_xor_k6_k2_xor_k8 = k3_xor_k6_k2_xor_k8^0x7892;
int k3_xor_k6 = k3_xor_k6_k2_xor_k8 &amp; 0xff;//低位
int k2_xor_k8 = k3_xor_k6_k2_xor_k8 &gt;&gt; 8;//高位
int k1=0, k2=0, k3=0, k5=0, k6=0, k7=0, k8=0, k9=0, k10=0;//
printf(“****************************************************\n”);
printf(“************* 010 Editor v3.1.2 keygen *************\n”);
printf(“************* by anhkgg 2014-11-18 *************\n”);
printf(“****************************************************\n\n”);
printf(“name&gt;”);
scanf(“%s”, name);
if(!stricmp(name, “999”))
{
printf(“name is not valid!\n”);
system(“pause”);
return 0;
}
DWORD name_chk = ckname(name, k4==0x9C?1:0, islowk1k7&lt;2?islowk1k7:0, k3k6k2k8) ;
k5 = name_chk &amp; 0xFF;
k6 = (name_chk &amp; 0xFFFF)&gt;&gt;8;//
k7 = (name_chk &gt;&gt; 16) &amp; 0xFF;//
k8 = (name_chk &gt;&gt; 24) &amp; 0xFF;//
k1 = k1_xor_k7 ^ k7;//
k2 = k2_xor_k8 ^ k8;
k3 = k3_xor_k6 ^ k6;//
printf(“key&gt;%02x%02x-%02x%02x-%02x%02x-%02x%02x\n\n”, k1, k2, k3, k4, k5, k6, k7, k8);
system(“pause”);
return 0;
}
</code></pre>

<h3>其他</h3>

<p>本次分析针对的是010 v3.1.2
希望各位大牛不要见笑，欢迎交流</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hctf Writeup]]></title>
    <link href="http://www.devilstep.com/2014/11/10/hctf-writeup/"/>
    <updated>2014-11-10T22:15:57-08:00</updated>
    <id>http://www.devilstep.com/2014/11/10/hctf-writeup</id>
    <content type="html"><![CDATA[<p>author: anhkgg</p>

<h3>丘比龙的最爱</h3>

<p>传说，丘比龙是丘比特的弟弟，丘比龙是一只小爱神，虽然有两只翅膀，但因为吃多了，导致身体太胖，所以飞不起来~那么问题来了?!丘比龙吃什么食物吃多了变胖了
百度之：甜甜圈</p>

<!--more-->


<h3>nvshen</h3>

<p>猫流大大发现一个女神，你能告诉我女神的名字么（名字即是flag）<a href="http://107.189.158.112/0aab9b20410fdd880c53922048023266/nvshen.zip">http://107.189.158.112/0aab9b20410fdd880c53922048023266/nvshen.zip</a>
打开大量数据，感觉是base64，解密了前一部分数据看到PNG, IHDR字符，应该就是png图片了，然后python写了段脚本：</p>

<pre><code>import base64
f1 = open(“nvshen.txt”, “r”)
f2 = open(“nvshen.png”, “wb”)
while 1:
buf = f1.read(12)
if not buf:
break;
\#print buf, base64.decodestring(buf)
f2.write(base64.decodestring(buf))
f1.close()
f2.close()
</code></pre>

<p>得到一张女神照片，纠结了会，google图片之，找到女神名字“爱新觉罗·启星”，被中间的点坑了几次，然后flag是“爱新觉罗启星”， 出题人原来喜欢她啊
<img src="/upload/0751f444dc849c083ee0f0826e8f567e.jpg" alt="ss" /></p>

<h3>babyCrack</h3>

<p>107.189.158.112/d55757a7ccf958399789e18e1d8199de/babyCrack.zip
PEID查了下，是.net，马上祭出神奇.net reflector， 结果工具过期，重新下了个注册机，搞定，几个函数，翻了下，看到flag：hctf{bAByCtsvlmE!}</p>

<pre><code>private void button1_Click(object sender, EventArgs e)
{
bool flag = false;
Config.user = this.textBox1.Text;
string user = Config.user;
string str2 = “hctf{bABy_CtsvlmE_!}”;
if (str2.CompareTo(user) == 0)
{
flag = true;
}
if (flag)
{
MessageBox.Show(“good !!!”);
}
}
</code></pre>

<h3>stego_final</h3>

<p>图片隐写题，Stegsolve各种通道翻了一下，看到张二维码，用手机一扫，识别不了，背影有些黑点，又不会图片处理，ps一番，终于找到flag：flag{hctf_3xF$235#^3}</p>

<h3>wzwzDingDing</h3>

<p>被坑的最惨的一道题，是个64位驱动，代码真不多，只有30多个函数，翻了一个遍，流程分析清楚，最后有个字符串提示 “OK!YOU ARE REALLY GOOD!Also, there is a } left!”</p>

<p>就是说代码执行到这，应该会得到flag，然后这个是在IRP_MJ_DEVICE_CONTROL函数中，对应多个ctl code，分别是：
0x88102004，0x88102008, 0x8810200C, 0x88102014, 0x88102010，以及都不符和一个ctl code，每个ctl code对应分支都会对偏移0x48E0的一个标志进行操作，最后得到0xFFFFFF执行提示字符串的分支。</p>

<p>下面是触发的ring3代码：</p>

<pre><code>HANDLE hDev = CreateFileA(DRV_SYM, GENERIC_ALL, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
if(hDev == INVALID_HANDLE_VALUE)
{
printf(“[-] open dev error %d\n”, GetLastError());
return 0;
}
printf(“[+] open dev success!\n”);
char buf[20] = “^lejAJ]O”;
DWORD dwReturn = 0;
if(! DeviceIoControl(hDev, 0x88102004, buf, strlen(buf), buf, strlen(buf), &amp;dwReturn, NULL))
{
printf(“[-] dev control error %d\n”, GetLastError());
return 0;
}
char buf1[20] = “MNIII”;
if(! DeviceIoControl(hDev, 0x88102004, buf1, strlen(buf1), buf1, strlen(buf1), &amp;dwReturn, NULL))
{
printf(“[-] dev control error %d\n”, GetLastError());
return 0;
}
if(! DeviceIoControl(hDev, 0x88102008, NULL, 0, NULL, 0, &amp;dwReturn, NULL))
{
printf(“[-] dev control error %d\n”, GetLastError());
return 0;
}
//8810200C
if(! DeviceIoControl(hDev, 0x8810200C, NULL, 0, NULL, 0, &amp;dwReturn, NULL))
{
printf(“[-] dev control error %d\n”, GetLastError());
return 0;
}
if(! DeviceIoControl(hDev, 0x88102014, NULL, 0, NULL, 0, &amp;dwReturn, NULL))
{
printf(“[-] dev control error %d\n”, GetLastError());
return 0;
}
//88102010
if(! DeviceIoControl(hDev, 0x88102010, NULL, 0, NULL, 0, &amp;dwReturn, NULL))
{
printf(“[-] dev control error %d\n”, GetLastError());
return 0;
}
</code></pre>

<p>最后就进入了提示字符分支，结果在这里 text:0000000000012361 call [rsp+0C8h+ShellCode]，就崩了，被坑了好久，这里需要结合题目提示flag: HCTF{‘intput’.encode(‘hex’)}
就是需要修复那段shellcode，让其正确执行，然后顺利执行到提示字符串位置，分支中还有代码提示需要修复的代码字节位置，然后就是根据一个堆栈平衡就能修复（开始明显看不懂题意啊，坑）
修复前代码：</p>

<pre><code>fffff880`02f85d90 l5b
wzwzDingDing+0x2d90:
fffff880`02f85d90 （10） 5152 adc byte ptr [rcx+52h],dl =&gt;(50 //push rax push rcx
fffff880`02f85d93 53 push rbx
fffff880`02f85d94 55 push rbp
fffff880`02f85d95 56 push rsi
fffff880`02f85d96 57 push rdi
fffff880`02f85d97 （90） nop
fffff880`02f85d98 （90） nop//push r8 (41 50
fffff880`02f85d99 4151 push r9
fffff880`02f85d9b 4152 push r10
fffff880`02f85d9d 4153 push r11
fffff880`02f85d9f 4154 push r12
fffff880`02f85da1 4155 push r13
fffff880`02f85da3 4156 push r14
fffff880`02f85da5 4157 push r15
fffff880`02f85da7 90 nop
fffff880`02f85da8 （90） nop//(48 83 EC 28 sub rsp,28h
fffff880`02f85da9 (90 nop
fffff880`02f85daa (90 nop
fffff880`02f85dab (90 nop
fffff880`02f85dac 90 nop
fffff880`02f85dad 48c7c600000000 mov rsi,0
fffff880`02f85db4 488b040e mov rax,qword ptr [rsi+rcx]
fffff880`02f85db8 4883f007 xor rax,7
fffff880`02f85dbc 4889040e mov qword ptr [rsi+rcx],rax
fffff880`02f85dc0 90 nop
fffff880`02f85dc1 90 nop
fffff880`02f85dc2 90 nop
fffff880`02f85dc3 90 nop
fffff880`02f85dc4 48ffc6 inc rsi
fffff880`02f85dc7 4883fe0b cmp rsi,0Bh
fffff880`02f85dcb 74e0 je wzwzDingDing+0x2dad (fffff880`02f85dad)
fffff880`02f85dcd 90 nop
fffff880`02f85dce 4883c428 add rsp,28h
fffff880`02f85dd2 415f pop r15
fffff880`02f85dd4 415e pop r14
fffff880`02f85dd6 415d pop r13
fffff880`02f85dd8 415c pop r12
fffff880`02f85dda 415b pop r11
fffff880`02f85ddc 415a pop r10
fffff880`02f85dde 4159 pop r9
fffff880`02f85de0 4158 pop r8
fffff880`02f85de2 5f pop rdi
fffff880`02f85de3 5e pop rsi
fffff880`02f85de4 5d pop rbp
fffff880`02f85de5 5b pop rbx
fffff880`02f85de6 5a pop rdx
fffff880`02f85de7 (90) nop //59 pop rcx
fffff880`02f85de8 58 pop rax
fffff880`02f85de9 (90) nop//ret C3
fffff880`02f85dea 00cc add ah,cl
</code></pre>

<p>修复后代码：</p>

<pre><code>kd&gt; u fffff880`02f85d90 l5b
wzwzDingDing+0x2d90:
fffff880`02f85d90 50 push rax
fffff880`02f85d91 51 push rcx
fffff880`02f85d92 52 push rdx
fffff880`02f85d93 53 push rbx
fffff880`02f85d94 55 push rbp
fffff880`02f85d95 56 push rsi
fffff880`02f85d96 57 push rdi
fffff880`02f85d97 4150 push r8
fffff880`02f85d99 4151 push r9
fffff880`02f85d9b 4152 push r10
fffff880`02f85d9d 4153 push r11
fffff880`02f85d9f 4154 push r12
fffff880`02f85da1 4155 push r13
fffff880`02f85da3 4156 push r14
fffff880`02f85da5 4157 push r15
fffff880`02f85da7 90 nop
fffff880`02f85da8 4883ec28 sub rsp,28h
fffff880`02f85dac 90 nop
fffff880`02f85dad 48c7c600000000 mov rsi,0
fffff880`02f85db4 488b040e mov rax,qword ptr [rsi+rcx]
fffff880`02f85db8 4883f007 xor rax,7
fffff880`02f85dbc 4889040e mov qword ptr [rsi+rcx],rax
fffff880`02f85dc0 90 nop
fffff880`02f85dc1 90 nop
fffff880`02f85dc2 90 nop
fffff880`02f85dc3 90 nop
fffff880`02f85dc4 48ffc6 inc rsi
fffff880`02f85dc7 4883fe0b cmp rsi,0Bh
fffff880`02f85dcb 74e0 je wzwzDingDing+0x2dad (fffff880`02f85dad)
fffff880`02f85dcd 90 nop
fffff880`02f85dce 4883c428 add rsp,28h
fffff880`02f85dd2 415f pop r15
fffff880`02f85dd4 415e pop r14
fffff880`02f85dd6 415d pop r13
fffff880`02f85dd8 415c pop r12
fffff880`02f85dda 415b pop r11
fffff880`02f85ddc 415a pop r10
fffff880`02f85dde 4159 pop r9
fffff880`02f85de0 4158 pop r8
fffff880`02f85de2 5f pop rdi
fffff880`02f85de3 5e pop rsi
fffff880`02f85de4 5d pop rbp
fffff880`02f85de5 5b pop rbx
fffff880`02f85de6 5a pop rdx
fffff880`02f85de7 59 pop rcx
fffff880`02f85de8 58 pop rax
fffff880`02f85de9 c3 ret
fffff880`02f85dea 00cc add ah,cl
</code></pre>

<p>然后flag：HCTF{5041504883ec2859c3}，注意大小写啊</p>

<h3>其他</h3>

<p>就这么多了，经验太少，就各路大牛路过指导</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Get GS Cookie]]></title>
    <link href="http://www.devilstep.com/2014/11/02/how-to-get-gs-cookie/"/>
    <updated>2014-11-02T22:12:09-08:00</updated>
    <id>http://www.devilstep.com/2014/11/02/how-to-get-gs-cookie</id>
    <content type="html"><![CDATA[<p>author:anhkgg</p>

<h3>Stack cookie</h3>

<p>Stack cookies (/GS Switch cookie)，windows防止栈溢出的一种机制，<a href="http://www.pediy.com/kssd/pediy12/102719/724039/39112.pdf">详见</a>。</p>

<p>栈中的 cookie/GS保护</p>

<p>/GS 编译选项会在函数的开头和结尾添加代码来阻止对典型的栈溢出漏洞（字符串缓冲区）的利用。
当应用程序启动时，程序的 cookie（4 字节（dword），无符号整型）被计算出来（伪随机数）并保存在
加载模块的.data 节中,在函数的开头这个 cookie 被拷贝到栈中，位于 EBP 和返回地址的正前方（位于返
回地址和局部变量的中间）。
[buffer][cookie][saved EBP][saved EIP]
在函数的结尾处，程序会把这个 cookie 和保存在.data 节中的 cookie 进行比较。
如果不相等，就说明进程栈被破坏，进程必须被终止。</p>

<!--more-->


<p>栈中的 cookie/GS绕过方法
挫败这种栈溢出保护机制的最直接的方法是检索/猜测/计算出 cookie 值（这样就可以用相同的 cookie
覆盖栈中的 cookie），这个 cookie 有时候（很少）是一个静态值…但即使如此，它也可能包含一些不利
的字符而导致不能使用它。</p>

<h3>如何通过PE来获取GS cookie的值</h3>

<p>在PE的DataDirectory中，第10序号的是一个叫做LoadConfig的东西，保存了映像的配置数据，里面就有GS cookie，来看看这个数据结构
IMAGE_LOAD_CONFIG_DIRECTORY32</p>

<pre><code>typedef struct {
DWORD Size;
DWORD TimeDateStamp;
WORD MajorVersion;
WORD MinorVersion;
DWORD GlobalFlagsClear;
DWORD GlobalFlagsSet;
DWORD CriticalSectionDefaultTimeout;
DWORD DeCommitFreeBlockThreshold;
DWORD DeCommitTotalFreeThreshold;
DWORD LockPrefixTable; // VA
DWORD MaximumAllocationSize;
DWORD VirtualMemoryThreshold;
DWORD ProcessHeapFlags;
DWORD ProcessAffinityMask;
WORD CSDVersion;
WORD Reserved1;
DWORD EditList; // VA
DWORD SecurityCookie; // VA
DWORD SEHandlerTable; // VA
DWORD SEHandlerCount;
} IMAGE_LOAD_CONFIG_DIRECTORY32, *PIMAGE_LOAD_CONFIG_DIRECTORY32;

SecurityCookie
A pointer to a cookie that is used by Visual C++ or GS implementation.
</code></pre>

<p>所以，可以通过解析pe的方式，获取到SecurityCookie，进而绕过cookie/GS保护，这只是我的想法，也没测试过，是在分析某个sys的时间想到的，下面贴出获取Cookie的代码</p>

<pre><code>unsigned int __stdcall myGetGSSecureCookie(PVOID ImageBase, ULONG Size)
{
ULONG v2; // edi@1
PVOID v3; // esi@1
PVOID v4; // eax@2
unsigned int result; // eax@7
v3 = ImageBase;
v2 = Size;
if ( (signed int)myGetValidNtHeader(1, (unsigned int)ImageBase, Size, (int)&amp;ImageBase) &lt; 0//myGetValidNtHeader获取nt头地址
|| (v4 = RtlImageDirectoryEntryToData(v3, 1u, 0xAu, &amp;Size), !v4)// 通过加载配置目录信息找到SecureCookie
|| !Size
|| Size != 0x40 &amp;&amp; Size != *(_DWORD *)v4
|| *(_DWORD *)v4 &lt; 0x48u
|| (result = *((_DWORD *)v4 + 15), result &lt;= (unsigned int)v3)// loadcofig-&gt;SecurityCookie
// A pointer to a cookie that is used by Visual C++ or GS implementation.
|| result &gt;= (unsigned int)(v3 + v2 – 4) )
result = 0;
return result;
}
</code></pre>

<p>其他</p>

<p>没来得及查资料，是否有完整的绕过方法，这只是自己突然分析到这，想到的，不对之处，敬请见谅。</p>
]]></content>
  </entry>
  
</feed>
